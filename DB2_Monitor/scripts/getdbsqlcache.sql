-- Fergus (fergusmc@ie.ibm.com), Brendan (mooreof@ie.ibm.com)
-- 27Mar15
-- Moving time stuff to top, adding some more avg.
-- Changing the P/L labels for easier reading.

SELECT 
--	RPAD(SQLID, 7) AS SQLID,
	SECTION_TYPE AS "D/S",
	VALID AS V,
	EFFECTIVE_ISOLATION AS ISO,
	NUM_EXECUTIONS AS "EXECS",
	NUM_EXEC_WITH_METRICS "STATS_EXECS",
	INSERT_TIMESTAMP,


	-- TOTAL CPU TIME, user+system time, converting from micro to milli secs
	TOTAL_CPU_TIME/1000  AS TCPU_MSECS,


	-- AVG CPU TIME, 
	CASE
		WHEN NUM_EXEC_WITH_METRICS > 0 THEN

		TOTAL_CPU_TIME/NUM_EXEC_WITH_METRICS
	ELSE
		 0
	END as "AVG_CPU_USEC",

	--- ACTUAL TIME: The total amount of time spent executing activities. This value is given in milliseconds.


	TOTAL_ACT_TIME AS TACT_MSECS,
	
	CASE
		WHEN NUM_EXEC_WITH_METRICS > 0 THEN
		TOTAL_ACT_TIME/NUM_EXEC_WITH_METRICS
	ELSE
		 0
	END as AVGACT_MSEC,


	--  ROUTINE TIME
	TOTAL_ROUTINE_TIME    		AS TROUTINE_TIME_MSECS,
	CASE
		WHEN  TOTAL_ROUTINE_INVOCATIONS > 0 THEN
		TOTAL_ROUTINE_TIME/TOTAL_ROUTINE_INVOCATIONS
	ELSE
		0
	END AS AROUTINE_TIME_MSECS,

	TOTAL_ROUTINE_INVOCATIONS	AS TROUTINE_INVOCATIONS,
	COORD_STMT_EXEC_TIME    	AS COORD_STMT_EXEC_TIME,

	-- EXEC TIME
	STMT_EXEC_TIME			AS STMT_EXEC_MSECS,    	
	CASE
		WHEN NUM_EXEC_WITH_METRICS > 0 THEN
		STMT_EXEC_TIME/NUM_EXEC_WITH_METRICS
	ELSE
		0
	END AS ASTMT_EXEC_MSECS,


	--- ACTUAL wait TIME: Total MSECS spent waiting within the DB2Â® database server, while processing an activity.
	TOTAL_ACT_WAIT_TIME AS TACT_WT_MSECS,
	

	CASE
		WHEN NUM_EXEC_WITH_METRICS > 0 THEN
		TOTAL_ACT_WAIT_TIME/NUM_EXEC_WITH_METRICS
	ELSE
		 0
	END as AVGACT_WT_MSEC,


	--- POOL READ TIME: 
	POOL_READ_TIME  AS TBP_RD_MSEC,
	

	CASE
		WHEN NUM_EXEC_WITH_METRICS > 0 THEN

		POOL_READ_TIME/NUM_EXEC_WITH_METRICS
	ELSE
		 0
	END as AVGBP_RD_MSEC,


	--- POOL WRITE TIME:

	POOL_WRITE_TIME  AS TBP_WR_MSEC,
	

	CASE
		WHEN NUM_EXEC_WITH_METRICS > 0 THEN

		POOL_WRITE_TIME/NUM_EXEC_WITH_METRICS
	ELSE
		 0
	END as ACTBP_WR_MSEC,


	--- DIRECT READ TIME:

	DIRECT_READ_TIME AS TDT_RD_MSEC,

	CASE
		WHEN NUM_EXEC_WITH_METRICS > 0 THEN

		DIRECT_READ_TIME/NUM_EXEC_WITH_METRICS
	ELSE
		 0
	END as AVGDT_RD_MSEC,


	--- DIRECT WRITE TIME:

	DIRECT_WRITE_TIME  AS TDT_WR_MSEC,

	CASE
		WHEN NUM_EXEC_WITH_METRICS > 0 THEN

		DIRECT_WRITE_TIME/NUM_EXEC_WITH_METRICS
	ELSE
		 0
	END as AVGDT_WR_MSEC,


	--- LOCK time: msecs spent waiting on locks

	LOCK_WAIT_TIME,

	CASE
		WHEN NUM_EXEC_WITH_METRICS > 0 THEN
		LOCK_WAIT_TIME/NUM_EXEC_WITH_METRICS
	ELSE
		 0
	END as AVGLOCK_WT_MSEC,




	--- SORTS: Total Section Sorts


	TOTAL_SECTION_SORTS AS TSORTS,


	--- AVG NBR OF SORTS PER EXEC
	CASE
		WHEN NUM_EXEC_WITH_METRICS > 0 THEN
		TOTAL_SECTION_SORTS/NUM_EXEC_WITH_METRICS
	ELSE
		 0
	END as AVGSORTS,

	--- TOTAL SORT time including  WAIT time

	TOTAL_SECTION_SORT_TIME  AS "TMSECS_SORTTIME",


	CASE
		WHEN TOTAL_SECTION_SORTS > 0 THEN
		TOTAL_SECTION_SORT_TIME/TOTAL_SECTION_SORTS
	ELSE
		 0
	END as "AVGMSECS/SORT",

	--- SORT CPU time: msecs CPU SORT time

	TOTAL_SECTION_SORT_PROC_TIME  AS TMSECS_CPU_SORTTIME,

	CASE
		WHEN TOTAL_SECTION_SORTS > 0 THEN
		TOTAL_SECTION_SORT_PROC_TIME/TOTAL_SECTION_SORTS
	ELSE
		 0
	END as "AVGMSECS_CPU/SORT",


	--- LOCK time: msecs spent waiting on locks

	LOCK_WAIT_TIME  AS TLOCK_WT_MSECS,

	CASE
		WHEN NUM_EXEC_WITH_METRICS > 0 THEN
		LOCK_WAIT_TIME/NUM_EXEC_WITH_METRICS
	ELSE
		 0
	END as AVGLOCK_WT_MSEC,



	--- PREP time: msecs, Time in milliseconds required to prepare an SQL statement

	PREP_TIME  AS TPREP_MSECS,
	CASE
		WHEN NUM_EXEC_WITH_METRICS > 0 THEN
		PREP_TIME/NUM_EXEC_WITH_METRICS
	ELSE
		 0
	END as AVGPREP_MSECS,
	
	--- ROWS READ/RETURNED:

	CASE
		WHEN ROWS_RETURNED > 0 THEN
		ROWS_READ/ROWS_RETURNED
	ELSE
		 0
	END as "ROWS_READ/RETURNED_RATIO",
	

	--- ROWS READ

	ROWS_READ AS TROWS_READ,

	CASE
		WHEN NUM_EXEC_WITH_METRICS > 0 THEN
		ROWS_READ/NUM_EXEC_WITH_METRICS
	ELSE
		 0
	END as "AVGROWS_READ/EXEC",


	--- ROWS RETURNED:

	ROWS_RETURNED AS TROWS_RETURNED,

	CASE
		WHEN NUM_EXEC_WITH_METRICS > 0 THEN
		ROWS_RETURNED/NUM_EXEC_WITH_METRICS
	ELSE
		 0
	END as AVGROWS_RETURNED,


	ROWS_MODIFIED as TROWS_MODIFIED,
	CASE
		WHEN NUM_EXEC_WITH_METRICS > 0 THEN
		ROWS_MODIFIED/NUM_EXEC_WITH_METRICS
	ELSE
		 0
	END as AVGROWS_MODIFIED,


	--- DIRECT READS:

	DIRECT_READS AS TDIRECT_RD,


	CASE
		WHEN NUM_EXEC_WITH_METRICS > 0 THEN
		DIRECT_READS/NUM_EXEC_WITH_METRICS
	ELSE
		 0
	END as AVGDIRECT_RD,



	--- DIRECT WRITES:

	DIRECT_WRITES  AS TDIRECT_WR,

	CASE
		WHEN NUM_EXEC_WITH_METRICS > 0 THEN
		DIRECT_WRITES/NUM_EXEC_WITH_METRICS
	ELSE
		 0
	END as AVGDIRECT_WR,


	DIRECT_READ_REQS    	AS TDIRECT_RD_REQS,
	DIRECT_WRITE_REQS 	AS TDIRECT_WR_REQS,


	TOTAL_SORTS               	AS "TSORTS",
        SORT_OVERFLOWS             	AS "TSORT_OFLOW",

	--The number of sorts that have requested heaps after the sort heap threshold has been exceeded. 
        POST_THRESHOLD_SORTS       	AS "TPOSTTHR_SORTS",
        POST_SHRTHRESHOLD_SORTS 	AS "TPOSTSHR_THR_SORTS",
        LOCK_TIMEOUTS	              	AS "TLOCK_TIMEOUTS",



	LOCK_ESCALS			AS TLOCK_ESCALS,
	LOCK_WAITS 			AS TLOCK_WAITS, 		
	DEADLOCKS    			AS TDEADLOCKS,

	-- Number of lock escalations due to local lock memory usage reaching the limit specified in the maxlocks db cfg
	LOCK_ESCALS_MAXLOCKS 	 	TLOCK_ESCALS_MAXLOCKS,
	-- Number of lock escalations due to local lock memory usage reaching the limit specified in the locklist db cfg
	LOCK_ESCALS_LOCKLIST 	 	TLOCK_ESCALS_LOCKLIST,


	POOL_DATA_L_READS    	AS TBP_LDATA_READS,
	POOL_TEMP_DATA_L_READS  AS TBP_LTEMPDATA_LREADS,
	POOL_XDA_L_READS    	AS TBP_LXDA_LREADS,
	POOL_TEMP_XDA_L_READS   AS TBP_LTEMPXDA_LREADS,
	POOL_INDEX_L_READS    	AS TBP_LINDEX_LREADS,
	POOL_TEMP_INDEX_L_READS AS TBP_LTEMPINDEX_LREADS,
	POOL_DATA_P_READS    	AS TBP_PDATA_READS,
	POOL_TEMP_DATA_P_READS  AS TBP_PTEMPDATA_READS,
	POOL_XDA_P_READS    	AS TBP_PXDA_READS,
	POOL_TEMP_XDA_P_READS   AS TBP_PTEMPXDA_READS,
	POOL_INDEX_P_READS    	AS TBP_PINDEX_READS,
	POOL_TEMP_INDEX_P_READS AS TBP_PTEMPINDEX_READS,
	POOL_DATA_WRITES    	AS TBP_DATA_WRITES,
	POOL_XDA_WRITES    	AS TBP_XDA_WRITES,
	POOL_INDEX_WRITES    	AS TBP_INDEX_WRITES,
	

	WLM_QUEUE_TIME_TOTAL    as TQ_TIME,
	WLM_QUEUE_ASSIGNMENTS_TOTAL    AS TQ_ASSIGNMENTS,

	FCM_RECV_VOLUME    	AS TFCM_RECV_VOLUME,
	FCM_RECVS_TOTAL    	AS TFCM_RECVS_VOLUME,
	FCM_SEND_VOLUME    	AS TFCM_SEND_VOLUME,
	FCM_SENDS_TOTAL    	AS TFCM_SENDS_VOLUME,
	FCM_RECV_WAIT_TIME    	AS TFCM_RECV_WT_TIME,
	FCM_SEND_WAIT_TIME    	AS TFCM_SEND_WT_TIME,

	LOG_BUFFER_WAIT_TIME    AS TLOG_BUFFER_WT_TIME,
	NUM_LOG_BUFFER_FULL    	AS TNUM_LOG_BUF_FULL,
	LOG_DISK_WAIT_TIME    	AS TLOG_DISK_WT_MSECS,
	LOG_DISK_WAITS_TOTAL    AS TNUMLOG_DISK_WTS,
--	LAST_METRICS_UPDATE    	AS 
	NUM_COORD_EXEC    	AS NUM_COORD_EXEC,
	NUM_COORD_EXEC_WITH_METRICS    AS NUM_COORD_EXEC_METRICS,

	ROUTINE_ID    			AS ROUTINE_ID,
	QUERY_COST_ESTIMATE    		AS QUERY_COST_EST,
	STMT_PKG_CACHE_ID    		AS STMT_PKG_CACHE_ID,
	TOTAL_SECTION_TIME    		AS TSECTION_TIME,
	TOTAL_SECTION_PROC_TIME 	AS TSECTION_PROC_TIME,
	TOTAL_ROUTINE_NON_SECT_TIME    	AS TROUTINE_NON_SECTIONTIME,
	TOTAL_ROUTINE_NON_SECT_PROC_TIME AS TROUTINE_NON_SECTION_PROC_TIME,

	'@'|| PACKAGE_SCHEMA    || '@' AS "PKG_SCHEMA",
	'@'|| PACKAGE_NAME      || '@' AS "PKG_NAME",
	'@'|| PACKAGE_VERSION_ID  || '@' AS "PKG_VERSIONID",



        '@'||   STMT_TYPE_ID              || '@' AS "STMT_TYPE",
        '@'||   TRIM(VARCHAR(SUBSTR(STMT_TEXT, 1, 7500))) || '@' AS STMT,
        '@'||   TRIM(VARCHAR(SUBSTR(STMT_TEXT, 7501, 15000))) || '@' AS STMT2,
        '@'||   TRIM(VARCHAR(SUBSTR(STMT_TEXT, 15001, 20000))) || '@' AS STMT3,
	EXECUTABLE_ID AS EXEC_ID




FROM 
--	DUBPERF_SQLDATA
	TABLE(MON_GET_PKG_CACHE_STMT (NULL, NULL, NULL, -1))
WHERE 
	NUM_EXECUTIONS > 0


ORDER BY 
	NUM_EXECUTIONS DESC
	;
